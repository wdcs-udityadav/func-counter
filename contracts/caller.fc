#include "imports/stdlib.fc";

(slice, int) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),                 ;; counter_address
        ds~load_uint(32)                    ;; counter_value
    );
}

() save_data(slice counter_address, int counter_value) impure inline {
    set_data(
        begin_cell()
        .store_slice(counter_address)
        .store_uint(counter_value, 32)
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);     ;; operation code

    (slice counter_address, _) = load_data();
    if (op == 1) {                          ;; increment counter_value
        int increment_by = in_msg_body~load_uint(32);

        cell message_body = begin_cell()
        .store_uint(1, 32)                  ;; request op (op #1 = increment)
        .store_uint(increment_by, 32)
        .end_cell();

        cell message = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(counter_address)       ;; destination
        .store_coins(3000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)  
        .store_uint(1, 1)
        .store_ref(message_body)   
        .end_cell();
    
        int mode = 3;
        send_raw_message(message, mode);

        return();

    } elseif (op == 2) {                    ;; get counter_value
    
        cell message_body = begin_cell()
        .store_uint(2, 32)                  ;; request op (op #2 = get counter_value)
        .end_cell();

        cell message = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(counter_address)       ;; destination
        .store_coins(3000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)  
        .store_uint(1, 1)
        .store_ref(message_body)   
        .end_cell();
    
        int mode = 3;
        send_raw_message(message, mode);

        return();

    } elseif (op == 3) {                    ;; save returned counter_value

        int returned_counter_value = in_msg_body~load_uint(32);
        save_data(counter_address, returned_counter_value);
        
        return();

    } else {
        throw(777);
    }
}

(slice, int) get_contract_storage() method_id {
    var (counter_address, counter_value) = load_data();
    return (counter_address, counter_value);
}