#include "imports/stdlib.fc";

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),                       ;; counter_value
        ds~load_msg_addr(),                     ;; recent_sender
        ds~load_msg_addr()                      ;; owner_address
    );
}

() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
    set_data(
        begin_cell()
        .store_uint(counter_value, 32)
        .store_slice(recent_sender)
        .store_slice(owner_address)
        .end_cell()
    );
}

(int) get_counter_value() method_id {
    (int counter_value, _, _) = load_data();
    return counter_value;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    
    if(in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32);         ;; operation code

    var (counter_value, recent_sender, owner_address) = load_data();

    if (op == 1) {                              ;; increment
        int increment_by = in_msg_body~load_uint(32);

        save_data(counter_value + increment_by, sender_address, owner_address);
        return();

    } elseif (op == 2) {                        ;; return counter_value
        int counter_value = get_counter_value();
        
        cell message = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)            ;; destination
        .store_coins(3000000)
        .store_uint(0, 107)
        .store_uint(3, 32)                      ;; response op (op #3 = save counter_value)
        .store_uint(counter_value, 32)          ;; requested counter_value
        .end_cell();

        int mode = 3;
        send_raw_message(message, mode);
        return();

    } else {
        throw(888);
    }
}

(int, slice, slice) get_contract_storage() method_id {
    var (counter_value, recent_sender, owner_address) = load_data();
    return (counter_value, recent_sender, owner_address);
}